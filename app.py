# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p5QRH3dgpY4IArRFh5cC6LjHGd_xi_Rh
"""

# ‚úÖ Install if needed
#pip install streamlit transformers spacy sumy

import streamlit as st
import spacy
from transformers import pipeline
from collections import defaultdict
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.text_rank import TextRankSummarizer

# Load models
@st.cache_resource
def load_models():
    nlp = spacy.load("en_core_web_sm")
    summarizer = pipeline("summarization", model="google/pegasus-xsum", tokenizer="google/pegasus-xsum")
    ner_model = pipeline("ner", model="d4data/biomedical-ner-all", aggregation_strategy="simple")
    return nlp, summarizer, ner_model

nlp, summarizer, ner_model = load_models()

# Utilities
def preprocess_input(text):
    return text.replace('\n', ' ')[:1024]

def generate_abstractive_summary(text):
    try:
        result = summarizer(preprocess_input(text), max_length=150, min_length=40, do_sample=False)
        return result[0]['summary_text']
    except:
        return ""

def extract_entities(text):
    try:
        entities = ner_model(text[:512])
        entity_dict = defaultdict(list)
        for ent in entities:
            entity_dict[ent['entity_group']].append(ent['word'])
        return dict(entity_dict)
    except:
        return {}

def extract_age(text):
    doc = nlp(text)
    for ent in doc.ents:
        if ent.label_ == "DATE" and "year" in ent.text:
            return ent.text
    return "N/A"

# Main App
st.title("ü©∫ Clinical Summary Generator")

st.markdown("Type the **Doctor-Patient Conversation / Notes** below and get a clean structured clinical summary!")

user_input = st.text_area("Enter the Doctor-Patient Notes:", height=300)

if st.button("Generate Summary"):
    if user_input.strip() == "":
        st.warning("‚ö†Ô∏è Please enter some text first.")
    else:
        # Summarize
        abstractive = generate_abstractive_summary(user_input)

        # Extract entities
        entities = extract_entities(user_input)
        patient_age = extract_age(user_input)

        # Prepare sections
        sex = "female" if "Female" in entities.get("Sex", []) else ("male" if "Male" in entities.get("Sex", []) else "n/a")

        diagnoses = entities.get("Disease_disorder", []) + entities.get("Sign_symptom", [])
        medications = entities.get("Medication", [])
        treatments = entities.get("Treatment", [])

        # Format final output
        summary_lines = [
            "CLINICAL SUMMARY:",
            f"Patient: {patient_age} {sex}",
            "",
            "VISIT MOTIVATION:",
            abstractive,
            ""
        ]

        if diagnoses:
            summary_lines.extend(["KEY DIAGNOSES:"] + [f"- {d}" for d in diagnoses] + [""])

        if medications:
            summary_lines.extend(["MEDICATIONS:"] + [f"- {m}" for m in medications] + [""])

        if treatments:
            summary_lines.extend(["TREATMENTS:"] + [f"- {t}" for t in treatments] + [""])

        summary_lines.extend(["FOLLOW-UP:", "4 weeks for reassessment"])

        # Display
        final_summary = "\n".join(summary_lines)
        st.text_area("Generated Clinical Summary:", value=final_summary, height=500)